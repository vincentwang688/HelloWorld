==========c笔记==========

1.函数的指针
int add(int x,int y){
	return x+y;
}

int (*pf) = (int x,int y);
pf = add;

2.结构体 struct
3.联合体union
==========jni笔记========
0.jni中的方法都在 jni.h中
1.在c中打印log ？
	1.1引入LOG宏定义：
	
	#include <android/log.h>
	#define LOG_TAG "System.out.c"
	#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
	#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
	
	1.2 在.mk中加入（引入 liblog.so库）：LOCAL_LDLIBS += -llog
2.Android.mk介绍：

# 交叉编译器 在编译c代码/c++代码依赖的配置文件    linux下 makefile的语法的子集 
# 获取当前Android.mk的路径  
LOCAL_PATH := $(call my-dir) 
#变量的初始化操作 特点: 不会重新初始化LOCAL_PATH 的变量
include $(CLEAR_VARS)
#如果是c++的文件，则有如下参数,指定扩展名
LOCAL_CPP_EXTENSION:=cc
#映射,.so的文件名
LOCAL_MODULE :=hello
#映射,.c等源码文件名
LOCAL_SRC_FILES :=hello.c
include $(BUILD_SHARED_LIBRARY)

3.c中如果有中文问题会乱码，则设置该工程c文件编码为UTF-8

4.jni开发流程：
	4.1 编写 native方法
	4.2 (javah)生成方法名
	4.3  实现 native方法
	4.4  编写Android.mk文件
	4.5 ndk-build编译
	4.6 java中加载 .so 库
5.jni java的Sting转化为c的char类型：

char*   Jstring2CStr(JNIEnv*   env,   jstring   jstr)
{
	 char*   rtn   =   NULL;
	 jclass   clsstring   =   (*env)->FindClass(env,"java/lang/String");
	 jstring   strencode   =   (*env)->NewStringUTF(env,"GB2312");
	 jmethodID   mid   =   (*env)->GetMethodID(env,clsstring,   "getBytes",   "(Ljava/lang/String;)[B");
	 jbyteArray   barr=   (jbyteArray)(*env)->CallObjectMethod(env,jstr,mid,strencode); // String .getByte("GB2312");
	 jsize   alen   =   (*env)->GetArrayLength(env,barr);
	 jbyte*   ba   =   (*env)->GetByteArrayElements(env,barr,JNI_FALSE);
	 if(alen   >   0)
	 {
	  rtn   =   (char*)malloc(alen+1);         //"\0"
	  memcpy(rtn,ba,alen);
	  rtn[alen]=0;
	 }
	 (*env)->ReleaseByteArrayElements(env,barr,ba,0);  //
	 return rtn;
}

6.c代码调用java中的代码:场景1：c代码接收到特定信息，直接调用java代码，不返回处理；场景2：复用java中代码。（参见 5的 方法）
	调用原理：反射。1.先通过包名找到class 2.通过方法名和(javap -s获取)方法签名获取到方法id 3.(如果是静态方法，直接类调用)对象通过methodid调用方法
	调用类型：
		JNIEXPORT void JNICALL Java_cn_itcast_ndkcallback_DataProvider_callmethod1(JNIEnv * env, jobject obj){
	//在c代码里面调用java代码里面的方法
	// java 反射
    //1 . 找到java代码的 class文件
	//    jclass      (*FindClass)(JNIEnv*, const char*);
	jclass dpclazz = (*env)->FindClass(env,"cn/itcast/ndkcallback/DataProvider");
	if(dpclazz==0){
		LOGI("find class error");
		return;
	}
	LOGI("find class ");

	//2 寻找class里面的方法
	//   jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);
	jmethodID method1 = (*env)->GetMethodID(env,dpclazz,"helloFromJava","()V");
	if(method1==0){
		LOGI("find method1 error");
		return;
	}
	LOGI("find method1 ");
	//3 .调用这个方法
	//    void        (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);
	(*env)->CallVoidMethod(env,obj,method1);
}

JNIEXPORT void JNICALL Java_cn_itcast_ndkcallback_DataProvider_callmethod2
  (JNIEnv * env, jobject obj){
	// java 反射
    //1 . 找到java代码的 class文件
	//    jclass      (*FindClass)(JNIEnv*, const char*);
	jclass dpclazz = (*env)->FindClass(env,"cn/itcast/ndkcallback/DataProvider");
	if(dpclazz==0){
		LOGI("find class error");
		return;
	}
	LOGI("find class ");

	//2 寻找class里面的方法
	//   jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);
	jmethodID method2 = (*env)->GetMethodID(env,dpclazz,"Add","(II)I");
	if(method2==0){
		LOGI("find method2 error");
		return;
	}
	LOGI("find method2 ");
	// 3 调用这个方法
	//    jint        (*CallIntMethod)(JNIEnv*, jobject, jmethodID, ...);
	int result = (*env)->CallIntMethod(env,obj,method2,3,5);
	LOGI("c code  RESULT = %d",result);
}


JNIEXPORT void JNICALL Java_cn_itcast_ndkcallback_DataProvider_callmethod3
  (JNIEnv * env , jobject obj){
	  //1 . 找到java代码的 class文件
		//    jclass      (*FindClass)(JNIEnv*, const char*);
		jclass dpclazz = (*env)->FindClass(env,"cn/itcast/ndkcallback/DataProvider");
		if(dpclazz==0){
			LOGI("find class error");
			return;
		}
		LOGI("find class ");

		//2 寻找class里面的方法
		//   jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);
		jmethodID method3 = (*env)->GetMethodID(env,dpclazz,"printString","(Ljava/lang/String;)V");
		if(method3==0){
			LOGI("find method3 error");
			return;
		}
		LOGI("find method3 ");

		//3 .调用这个方法
		//    void        (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);
		(*env)->CallVoidMethod(env,obj,method3,(*env)->NewStringUTF(env,"haha in c"));

}

JNIEXPORT void JNICALL Java_cn_itcast_ndkcallback_DataProvider_callmethod4
  (JNIEnv * env, jobject obj){
	  //1 . 找到java代码的 class文件
		//    jclass      (*FindClass)(JNIEnv*, const char*);
		jclass dpclazz = (*env)->FindClass(env,"cn/itcast/ndkcallback/DataProvider");
		if(dpclazz==0){
			LOGI("find class error");
			return;
		}
		LOGI("find class ");

		//2 寻找class里面的方法
		//   jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);
		// 注意 :如果要寻找的方法是静态的方法 那就不能直接去获取methodid
		//jmethodID method4 = (*env)->GetMethodID(env,dpclazz,"printStaticStr","(Ljava/lang/String;)V");
		//    jmethodID   (*GetStaticMethodID)(JNIEnv*, jclass, const char*, const char*);
		jmethodID method4 = (*env)->GetStaticMethodID(env,dpclazz,"printStaticStr","(Ljava/lang/String;)V");
		if(method4==0){
			LOGI("find method4 error");
			return;
		}
		LOGI("find method4 ");

		//3.调用一个静态的java方法
		//    void        (*CallStaticVoidMethod)(JNIEnv*, jclass, jmethodID, ...);
		(*env)->CallStaticVoidMethod(env,dpclazz,method4,(*env)->NewStringUTF(env,"static haha in c"));
}





//obj DemoActivity
 JNIEXPORT void JNICALL Java_cn_itcast_ndkcallback_DemoActivity_call_1dp_1method1
  (JNIEnv * env, jobject obj){
	//在c代码里面调用java代码里面的方法
		// java 反射
	    //1 . 找到java代码的 class文件
		//    jclass      (*FindClass)(JNIEnv*, const char*);
		jclass dpclazz = (*env)->FindClass(env,"cn/itcast/ndkcallback/DataProvider");
		if(dpclazz==0){
			LOGI("find class error");
			return;
		}
		LOGI("find class ");

		//2 寻找class里面的方法
		//   jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);
		jmethodID method1 = (*env)->GetMethodID(env,dpclazz,"helloFromJava","()V");
		if(method1==0){
			LOGI("find method1 error");
			return;
		}
		LOGI("find method1 ");
		//3 .调用这个方法
		//    void        (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);
		//    jobject     (*NewObject)(JNIEnv*, jclass, jmethodID, ...);
		//  jobject     (*AllocObject)(JNIEnv*, jclass);
		jobject dpobj= (*env)->AllocObject(env,dpclazz);

		(*env)->CallVoidMethod(env,dpobj,method1);
}

7.native代码和调用的java代码不在同一个类里面。(以后整理)

8.小知识点
基础知识
JNI(Java Native Interface,JAVA原生接口) 
使用JNI可以使Java代码和其他语言写的代码(如C/C++代码)进行交互。

问：为什么要进行交互?
|-  首先，Java语言提供的类库无法满足要求,且在数学运算,实时渲染的游戏上,音视频处理等方面上与C/C++相比效率稍低。 
|-  然后，Java语言无法直接操作硬件，C/C++代码不仅能操作硬件而且还能发挥硬件最佳性能。
|-  接着，使用Java调用本地的C/C++代码所写的库，省去了重复开发的麻烦，并且可以利用很多开源的库提高程序效率。

C语言常见术语：
库函数：
|-  为了代码重用，在C语言中提供了一些常用的、用于执行一些标准任务(如输入/出)的函数，这些函数事先被编译，并生成目标代码，然后将生成的目标代码打包成一个库文件，以供再次使用。 库文件中的函数被称为库函数，库文件被称为函数库。
|-  在Windows中C语言库函数中的中间代码都是以.obj为后缀的，Linux中是以 .o为后缀。
提示：单个目标代码是无法直接执行的，目标代码在运行之前需要使用连接程序将目标代码和其他库函数连接在一起后生成可执行的文件。 Windows下.dll的文件 , linux下 .so .a的文件. 

头文件：
|-  头文件中存放的是对某个库中所定义的函数、宏、类型、全局变量等进行声明，它类似于一份仓库清单。若用户程序中需要使用某个库中的函数，则只需要将该库所对应的头文件include到程序中即可。
   |-  头文件中定义的是库中所有函数的函数原型。而函数的具体实现则是在库文件中。
   |-  简单的说：头文件是给编译器用的，库文件是给连接器用的。
|-  在连接器连接程序时，会依据用户程序中导入的头文件，将对应的库函数导入到程序中。头文件以.h为后缀名。 

函数库：
|-  动态库：在编译用户程序时不会将用户程序内使用的库函数连接到用户程序的目标代码中，只有在运行时，且用户程序执行到相关函数时才会调用该函数库里的相应函数，因此动态函数库所产生的可执行文件比较小。
|-  静态库：在编译用户程序时会将其内使用的库函数连接到目标代码中，程序运行时不再需要静态库。使用静态库生成可执行文件比较大。

在Linux中：
|-  静态库命名一般为：lib+库名+.a 。
　　|-  如：libcxy.a 其中lib说明此文件是一个库文件，cxy是库的名称，.a说明是静态的。
|-  动态库命名一般为：lib+库名+.so 。.so说明是动态的。

交叉编译：
|-  将中间代码连接成当前计算机可执行的二进制程序时，连接程序会根据当前计算机的CPU、操作系统的类型来转换。
根据运行的设备的不同，可以将cpu分为：
|-  arm结构 ：主要在移动手持、嵌入式设备上。
|-  x86结构 ： 主要在台式机、笔记本上使用。如Intel和AMD的CPU 。
若想在使用了基于x86结构CPU的操作系统中编译出可以在基于arm结构CPU的操作系统上运行的代码，就必须使用交叉编译。
交叉编译：在一个平台下编译出在另一个平台中可以执行的二进制代码。Google提出的NDK就可以完成交叉编译的工作。

NDK全称：Native Development Kit 。
|-  NDK是一系列工具的集合，它有很多作用。
   |-  首先，NDK可以帮助开发者快速开发C(或C++)的动态库。
   |-  其次，NDK集成了交叉编译器。使用NDK，我们可以将要求高性能的应用逻辑使用C开发，从而提高应用程序的执行效率。
NDK工具必须在Linux下运行，它可以在linux环境下编译出可以在arm平台下运行的二进制库文件。


　　使用JNI技术，其实就是在Java程序中，调用C语言的函数库中提供的函数，来完成一些Java语言无法完成的任务。由于Java语言和C语言结构完全不相同，因此若想让它们二者交互，则需要制定一系列的规范。JNI就是这组规范，此时	Java只和JNI交互，而由JNI去和C语言交互。

　　JNI技术分为两部分：Java端和C语言端。且以Java端为主导。
　　|-  首先，Java程序员在Java端定义一些native方法，并将这些方法以C语言头文件的方式提供给C程序员。
　　|-  然后，C程序员使用C语言，来实现Java程序员提供的头文件中定义的函数。
　　|-  接着，C程序员将函数打包成一个库文件，并将库文件交给Java程序员。
　　|-  最后，Java程序员在Java程序中导入库文件，然后调用native方法。

　　在Java程序执行的时候，若在某个类中调用了native方法，则虚拟机会通过JNI来转调用库文件中的C语言代码。提示：C代码最终是在Linux进程中执行的，而不是在虚拟机中。

问题：在Android中可执行的文件，在Linux中一定可以执行吗？ arm处理的linux 
那为什么要说，NDK会交叉编译。


9.JNIEnv 是与线程有关的代表 JNI环境的结构体。即一个线程 一个 JNIEnv