//这里是常用的数据结构和算法笔记

第二章：数组
1.数组：
	删除算法中暗含一个洞：即数组中不允许有洞！如果有洞，那么会增加其他算法的难度，还要额外判断是否为空！
	因此非空数据项必须连续存储。删除完成后先前移位。
	
	线性查找： O(N)
	二分查找: O(log(N))
	无序数组的插入：O(1)
	有序数组的插入：O(N)
	无序数组的删除：O(N)
	有序数组的删除：O(N)
	
第三章：简单排序

1.冒泡排序 :O(N²) 比较次数、交换次数 都是 O(N²)
2.选择排序：O(N²) 比较次数 O(N²) 、交换次数 O(N)。so,选择排序在数据比较大时略好于冒泡。
3.插入排序：O(N²) 一般来说比冒泡快一倍，比选择也要快一点。通常被用作发杂算法排序的最后阶段，例如：快速排序
				 在基本有序的情况下，插入排序几乎至于要 O(N)
				 
	1.当数据量很小时可以使用 冒泡排序。
	2.选择排序虽然把交换次数降到了最低，但比较的次数仍然很大。当数据量很小并且交换数据相对于比较数据更耗时的情况下
	 可以选择选择排序
	3.在大多数情况下，假设数据量比较小且基本有序时插入排序是最好的选择，但当数据量很大时，快速排序是最快的方法。
	
第四章：栈和队列
	
栈：	1.push 入栈
	2.Pop 出栈
	3.peek 查看

栈实例一：字符串反转
栈实例二：分隔符匹配 {()}
栈的 出入时间复杂度是 O(1)。

队列：
	循环队列：队尾指针和队头指针同时绕道初始的位置状态！

队列的 出入时间复杂度是 O(1)。
	双端队列：right left
	优先级队列：专用的队列。更具数据的优先级插入到队列的不同地方。

第五章 链表
	在链表中：每个数据象都被包含在一个link中。一个节点有两个区域：data区和下一个节点的引用next，所以链表本身有一个第一个节点的引用first。
	链表在表头插入和删除速度最快！仅需改变 引用 即可。花费 O(1).比数组优越的地方是可自由使用大小。
	单链表：
	双端列表：即第一个节点 同时保存了第一个和最后一个节点的引用
	有序链表：
	双向链表：data pre next
	迭代器：迭代器总是指向链表中的一些节点，它同链表相关联，并不等同于链表或者节点。
	
 第六章 递归
 	
 	人们使用递归是他概念上简化了问题，而不是本质上更有效率！
 	
 	归并排序：O(Nlog(N)):把两个有序数据合并到一个大的数组中。归并排序的思想是把一个数组分成两半，然后把这两半合成到一起。接着分..就是递归
 	
 	消除递归：有些算法趋向于使用递归，有些算法则不是！实际的证明中递归算法效率并不高！
 	
 	
 第七章 高级排序
 	
 	简单排序都是一些容易实现但速度比较慢的算法。
 	归并排序的速度要比简单排序要快，但是他需要的空间是原始数组的两倍！
 	
 	希尔排序 ：O(N*log(N)²)是基于插入排序的
 	快速排序：O(N*log(N))
 	基数排序：
 	
 第八章 二叉树
 	
 	1.有序数组中插入太慢
 	2.链表中查找太慢
 	
 	
 	
 	

	static void bubleSort(int[] arrs) {
		int len = arrs.length;
		for (int out = len-1; out > 1; out--) {
			for (int in = 0; in <out ; in++) {
				if (arrs[in] > arrs[in + 1]) {
	
					arrs[in] = arrs[in]+arrs[in+1];
					arrs[in+1] = arrs[in]-arrs[in+1];
					arrs[in] = arrs[in]-arrs[in+1];
				}
			}
		}

		for (int arr : arrs) {
			System.out.print(arr+",");
		}
		System.out.println();
	}
	
	static void selectSort(int[] arrs) {
		int len = arrs.length;
		for (int out = 0;out<len;out++) {
			for(int in = out+1;in<len-1;in++){
				if(arrs[out]>arrs[in]){
					arrs[in] = arrs[in]+arrs[out];
					arrs[out] = arrs[in]-arrs[out];
					arrs[in] = arrs[in]-arrs[out];
				}
			}
		}

		for (int arr : arrs) {
			System.out.print(arr+",");
		}
		System.out.println();
	}
	
	static void insertSort(int[] arrs) {
		int len = arrs.length;
	
		for(int i=0;i<len-1;i++){
			if(arrs[i]>arrs[i+1]){
				int temp = arrs[i+1];
				for(int j=i;j>0;j--){
					if(arrs[j]>temp){
					
						arrs[j] = arrs[j]+arrs[j+1];
						arrs[j+1] = arrs[j]-arrs[j+1];
						arrs[j] = arrs[j]-arrs[j+1];
					}else{
						arrs[j+1] = temp;
						break;
					}
				}
			}
		}
		

		for (int arr : arrs) {
			System.out.print(arr+",");
		}
		System.out.println();
	}
	
	static void shellSort(int[] arrs) {
		int len = arrs.length;
	
		int h = 1;
		while(h<len/3){
			h = h*3+1;
		}
		
		while(h>0){
			int temp ;
			int inner;
			for(int outer = h;outer<len;outer++){
				temp = arrs[outer];
				inner = outer;
				while(inner>h-1 && arrs[inner-h]>=temp){
					arrs[inner] = arrs[inner-h];
					inner -=h;
				}
				arrs[inner] = temp;
			}
			
			h = (h-1)/3;
		}
		

		for (int arr : arrs) {
			System.out.print(arr+",");
		}
		System.out.println();
	}
	
	static void quickSort(int[] arrs) {
		
	
		requickSort(0,arrs.length-1);

		for (int arr : arrs) {
			System.out.print(arr+",");
		}
		System.out.println();
	}

	private static void requickSort(int left, int right) {
		if(left>right){
			
			return;
		}else{
			int privot = arrs[right];
			int parti = partionIt(left,right,privot);
			
			requickSort(left, parti-1);
			requickSort(parti+1, right);
		}
		
		
	}

	private static int partionIt(int left, int right, int privot) {
		// TODO Auto-generated method stub
		
		while(arrs[left++]<privot);
		while(arrs[right--]>privot && right>0);
		
		if( left>= right){
			return left;
		}else{
			//swap(left,right);
		}
		
		return 0;
	}
 