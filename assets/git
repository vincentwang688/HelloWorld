1.git --config
2.git init
3.git add *
4.git commit
5.git status
6.git diff 单单 git diff 不过是显示还没有暂存起来的改动
	git diff 看暂存前后的变化：
	git diff --cached 查看已经暂存起来的变化：
7.git rm
8.git mv
9.git log
10.git commit --amend
11.git reset HEAD <file>...
12.git checkout
13.git fetch
14.git pull
15.git tag
16.git branch
17.git merge
18.git rebase
19.gti tag
20.git archieve
21.git shortlog

本次更新的简要描述（50 个字符以内）

    如果必要，此处展开详尽阐述。段落宽度限定在 72 个字符以内。
    某些情况下，第一行的简要描述将用作邮件标题，其余部分作为邮件正文。
    其间的空行是必要的，以区分两者（当然没有正文另当别论）。
    如果并在一起，rebase 这样的工具就可能会迷惑。

    另起空行后，再进一步补充其他说明。

    - 可以使用这样的条目列举式。

    - 一般以单个空格紧跟短划线或者星号作为每项条目的起始符。每个条目间用一空行隔开。
    不过这里按自己项目的约定，可以略作变化。
    
    
 1.git 如何和远程仓库关联？
 	a.首先自己得是一个git init 吧
 	b.git remote add <仓库名> <url>:添加远程仓库
 	c.git pull 获取仓库数据吧
 	d.git commit . push
 	
 	
 2.git 获取远程分支：（因为默认clone的是master分支）
 git checkout -b local-branchname origin/remote_branchname  就可以将远程分支映射到本地命名为local-branchname  的一分支。
 
 3.git 创建和切换分支
 git checkout -b newbranch
 
 4.将本地新建分支推送到远程分支
 git push origin test:test
 
 5.git 撤销：没有add 和 commit
 git checkout -- fileName
 
 

6. 
HEAD     commit版本
Index     staged版本

7.rebase衍合：看起来就像是没有分支过，一直在一条线上开发